name: Images
on:
  workflow_call:
    inputs:
      bucket:
        required: true
        type: string

jobs:
  Matrix:
    runs-on: [ubuntu-24.04]
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683"

      - name: Install Lix
        uses: samueldr/lix-gha-installer-action@v1

      - id: build-matrix
        name: "Generate Build Matrix"
        run: |
          PS4=" $ "
          set -xeu
          (
          printf "matrix=%s\n" "$(nix-instantiate --show-trace --argstr bucket "${{ inputs.bucket }}" --strict --eval --json ./.ci/build-matrices.nix)"
          ) >> "$GITHUB_OUTPUT"
  Builds:
    name: ${{ matrix.name }}
    needs: Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Try to build everything
      matrix: ${{ fromJSON(needs.Matrix.outputs.matrix) }}
    steps:
      # Why do this? To prevent a thundering herd.
      # This will randomly delay the actual start of every job by a value.
      # Otherwise GHA API calls, especially regarding the cache, might 429.
      # The amount of minutes is pretty arbitrary and could be updated in due time.
      - name: ðŸ’¤ Random delay
        run: |
          delay=$(( RANDOM % ( 3 * 60 ) ))
          printf "Waiting for %d seconds...\n" "$delay"
          while (( delay-- && delay > 0 )); do printf "."; sleep 1; done
          printf "\n... done!\n"

      - name: Checkout repository
        uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683"

      - name: Install Lix
        uses: samueldr/lix-gha-installer-action@v1

      - name: Build ${{ matrix.attr }}
        run: |
          export NIX_PATH=nixpkgs=$PWD/pkgs.nix
          .ci/nix-error-to-workflow-error.rb nix-build ./release.nix --system "${{ matrix.system }}" --attr '${{ matrix.attr }}'
